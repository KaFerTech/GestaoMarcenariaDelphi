unit unDmConexao;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Phys.IBBase,
  Data.DB, FireDAC.Comp.Client, Dialogs;

type
  TdmConexao = class(TDataModule)
    fdConnection: TFDConnection;
    fbDriverLink: TFDPhysFBDriverLink;
    wcConexao: TFDGUIxWaitCursor;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  dmConexao: TdmConexao;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

  uses IniFiles;

  var
  ini: TIniFile;
  diretorio, servidor, banco, usuario, senha: string;


procedure TdmConexao.DataModuleCreate(Sender: TObject);
begin
  // Criar uma instância do objeto TIniFile, passando o caminho do arquivo .ini
  ini := TIniFile.Create('C:\Users\kaiqu\OneDrive\Documentos\Kaique\Delphi\Marcenaria_do_Catarina\Win32\Debug\db.ini');
  diretorio := ExtractFilePath(Application.ExeName);

  try
    // Ler as informações de conexão do arquivo .ini
    servidor := ini.ReadString('BancoDados', 'Servidor', '');
    banco := ini.ReadString('BancoDados', 'Banco', '');
    usuario := ini.ReadString('BancoDados', 'Usuario', '');
    senha := ini.ReadString('BancoDados', 'Senha', '');
  finally
    // Liberar o objeto TIniFile
    ini.Free;
  end;

  // Seta a lib do driver
  fbDriverLink.VendorLib := 'C:\Windows\System32\FBCLIENT.DLL';
  // 'C:\Windows\System32\gds32.dll';

  // Parametros da conexão
  fdConnection.Params.DriverID := 'FbDriverLink';
  fdConnection.Params.Add('Server=127.0.0.1'); // ('Server=127.0.0.1');
  fdConnection.Params.Add('Port=3050');
  // fdConnection.Params.Database := 'C:\CursoEscriba\Dados\DbChamados.fdb';
  fdConnection.Params.Database := 'C:\Users\gean.pereira\Desktop\FIREBIRD\DBCHAMADOS.FDB';
  fdConnection.Params.UserName := 'SYSDBA';
  fdConnection.Params.Password := 'masterkey';
  fdConnection.Params.Add('CharacterSet=csUTF8');

  // tenta conectar com o banco
  if not Assigned(fdConnection) then
  begin
    ShowMessage('Erro: fdConnection não está atribuído.');
    Exit;
  end;

  if fdConnection.Connected then
  begin
    ShowMessage('A conexão já está aberta.');
    Exit;
  end;

  try
    fdConnection.Connected := True;
  except
    on E: Exception do
    begin
      ShowMessage('Erro de conexão com o banco. ' +
        'O Sistema retornou o seguinte erro: ' + E.Message);
    end;

  end;






end;

end.
